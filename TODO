√ 0!! -- SEGUIR MIGRANDO LOS EXECUTORS A USO DEL METODO DE EXECUTION END Y ELIMINAR PASO DE PARAMETRO PROCESS A EXEC Y A GETVALUES:
    HECHOS:
        MAIL +PROBADO
        ICONV +PROBADO
        MYSQL +PROBADO
        WAIT +PROBADO
        S3 +PROBADO
        SCP +PROBADO
        SHELL (falta la parte de kill y comento la parte de retry para 0.3) +PROBADO
        POSTGRES
        REDIS


√ 0.1! Llevar getArgs a Executor y mddificar los procesos que tiran de process.getArgs
0.2! Ver como aislar el objeto process para que no se pueda hacer de toddo con el en los executors
0.3! Llevar reintentos a la logica general de procesos / ejecución


1 > LLEVAR A NOTIFICATIONS LOS CAMBIOS DE EXECUTIONS (GETVALUES)
2 > SUSTITUIR POR COMPLETO REPLACEWITH CON REPLACEWITH O REPLACEWITHSMART.



> HACER CONSULTABLES LAS EJECUCIONES FORZADAS (MEDIANTE API CON CUSTOM VALUES)

> TIEMPO LIMITE PARA LA EJECUCIÓN
> DESPLANIFICAR UNA EJECUCIÓN PLANIFICADA CONCRETA VIA API


> Forzar una ejecución a una fecha dada (lo admite por defecto el modulo que usamos node-schedule)

> Permiitir que se aborte runnerty si no se consigue conexión con MongoDB mediante parametro



√ HACER QUE END_CHAIN_ON_FAIL FUNCIONE PARA TODOS LOS EXECUTORS

PODER ADJUNTAR FICHEROS A SLACK Y TELEGRAM

√ 1.- Comprobar si el directorio de los ficheros de OUTPUT existe y si no existe crearlo.

VALIDAR JSON QUE VENGA DE ITERATOR_OUTPUT

4.- COMPROBAR QUE CUANDO UN PROCESO TIENE REINTENTOS NO SE PONE A ERROR Y SALTA EL PROCESO QUE DEBE DE EJECUARSE CUANDO EL PROCESO PREVIO FALLA. ESTO DEBE DE PASAR CUANDO YA NO VA A HABER MAS REINTENTOS.

5.- Incluir condición exists en depends_process para cuando sea un objeto file. Esto no iría por chokidar sino simplemente una comprobación en dependencias de si existe o no el fichero.

! COMPROBAR O RESTRINGIR DE ALGUNA MANERA QUE LAS DEPENDENCIAS DE UNA CADENA ITERABLE SEAN DE UN SOLO PROCESO DE UNA CADENA.


HACER QUE SE PUEDAN TENER VALORES PARAMETRIZADOS A NIVEL DE CADENA. COMO GLOBAL_VALUES PERO A NIVEL CHAIN.
